/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Fellowship: "angels" | "founders" | "writers"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Announcement: { // root type
    body: string; // String!
    created_ts: string; // String!
    fellowship: string; // String!
    id: number; // Int!
    title: string; // String!
    updated_ts: string; // String!
  }
  NewsfeedItem: { // root type
    created_ts: string; // String!
    id: number; // Int!
    type: string; // String!
  }
  Project: { // root type
    created_ts: string; // String!
    description: string; // String!
    icon_url: string; // String!
    id: number; // Int!
    name: string; // String!
    updated_ts: string; // String!
  }
  Query: {};
  User: { // root type
    avatar_url: string; // String!
    bio: string; // String!
    created_ts: string; // String!
    fellowship: string; // String!
    id: number; // Int!
    name: string; // String!
    updated_ts: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Announcement: { // field return type
    body: string; // String!
    created_ts: string; // String!
    fellowship: string; // String!
    id: number; // Int!
    title: string; // String!
    updated_ts: string; // String!
  }
  NewsfeedItem: { // field return type
    announcement: NexusGenRootTypes['Announcement'] | null; // Announcement
    created_ts: string; // String!
    id: number; // Int!
    project: NexusGenRootTypes['Project'] | null; // Project
    type: string; // String!
    user: NexusGenRootTypes['User'] | null; // User
  }
  Project: { // field return type
    created_ts: string; // String!
    description: string; // String!
    icon_url: string; // String!
    id: number; // Int!
    name: string; // String!
    updated_ts: string; // String!
    users: NexusGenRootTypes['User'][]; // [User!]!
  }
  Query: { // field return type
    announcement: NexusGenRootTypes['Announcement']; // Announcement!
    newsfeed: NexusGenRootTypes['NewsfeedItem'][]; // [NewsfeedItem!]!
    project: NexusGenRootTypes['Project']; // Project!
    user: NexusGenRootTypes['User']; // User!
  }
  User: { // field return type
    avatar_url: string; // String!
    bio: string; // String!
    created_ts: string; // String!
    fellowship: string; // String!
    id: number; // Int!
    name: string; // String!
    projects: NexusGenRootTypes['Project'][]; // [Project!]!
    updated_ts: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Announcement: { // field return type name
    body: 'String'
    created_ts: 'String'
    fellowship: 'String'
    id: 'Int'
    title: 'String'
    updated_ts: 'String'
  }
  NewsfeedItem: { // field return type name
    announcement: 'Announcement'
    created_ts: 'String'
    id: 'Int'
    project: 'Project'
    type: 'String'
    user: 'User'
  }
  Project: { // field return type name
    created_ts: 'String'
    description: 'String'
    icon_url: 'String'
    id: 'Int'
    name: 'String'
    updated_ts: 'String'
    users: 'User'
  }
  Query: { // field return type name
    announcement: 'Announcement'
    newsfeed: 'NewsfeedItem'
    project: 'Project'
    user: 'User'
  }
  User: { // field return type name
    avatar_url: 'String'
    bio: 'String'
    created_ts: 'String'
    fellowship: 'String'
    id: 'Int'
    name: 'String'
    projects: 'Project'
    updated_ts: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    announcement: { // args
      id: number; // Int!
    }
    newsfeed: { // args
      fellowship: NexusGenEnums['Fellowship']; // Fellowship!
      limit: number; // Int!
      offset: number; // Int!
    }
    project: { // args
      id: number; // Int!
    }
    user: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}